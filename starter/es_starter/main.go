package main

import (
	"bytes"
	"context"
	"encoding/json"
	"gemini/db"
	"gemini/profile"
	"gemini/store"
	"github.com/elastic/go-elasticsearch/v7"
	"github.com/elastic/go-elasticsearch/v7/esapi"
	"log"
	"strconv"
)

func init() {
	db.MustInitMySQL("kp_user_local:Kupu123!@#@tcp(10.131.0.206:3306)/qiyee_job_data") //预发环境
	//db.MustInitMySQL("sc_kupu:Sc_kupu_1234@tcp(10.128.0.28:3306)/qiyee_job_data") //生产环境
}

var ids = []int64{8334, 8338, 8354, 8356, 8371, 8372, 8386, 8389, 8394, 8405, 8408, 8412, 8417, 8424, 8431, 8438, 8443, 8450, 8453, 8457, 8464, 8482, 8488, 8498, 8500, 8501, 8502, 8507, 8517, 8522, 8523, 8527, 8540, 8542, 8555, 8556, 8561, 8577, 8581, 8583, 8588, 8596, 8600, 8603, 8612, 8615, 8619, 8635, 8642, 8644, 8646, 8650, 8653, 8662, 8669, 8684, 8690, 8692, 8695, 8698, 8699, 8704, 8705, 8713, 8715, 8716, 8718, 8744, 8748, 8758, 8766, 8770, 8778, 8780, 8783, 8784, 8801, 8804, 8820, 8828, 8830, 8836, 8844, 8849, 8851, 8877, 8882, 8883, 8891, 8894, 8897, 8903, 8904, 8905, 8909, 8911, 8915, 8918, 8922, 8930, 8947, 8951, 8954, 8960, 8963, 8976, 8982, 8989, 8993, 8999, 9000, 9010, 9016, 9023, 9029, 9033, 9034, 9037, 9038, 9048, 9053, 9065, 9073, 9085, 9087, 9110, 9111, 9121, 9125, 9133, 9138, 9148, 9152, 9157, 9159, 9163, 9175, 9176, 9188, 9194, 9206, 9208, 9209, 9222, 9227, 9230, 9232, 9236, 9241, 9256, 9261, 9263, 9266, 9270, 9273, 9280, 9294, 9299, 9300, 9304, 9306, 9309, 9310, 9329, 9336, 9337, 9340, 9353, 9354, 9359, 9368, 9373, 9376, 9383, 9388, 9389, 9395, 9399, 9400, 9406, 9411, 9415, 9417, 9422, 9426, 9427, 9429, 9431, 9432, 9442, 9449, 9451, 9454, 9455, 9469, 9473, 9490, 9491, 9492, 9501, 9508, 9525, 9528, 9531, 9533, 9536, 9537, 9544, 9553, 9563, 9565, 9566, 9567, 9581, 9585, 9591, 9595, 9607, 9610, 9611, 9618, 9620, 9625, 9630, 9634, 9644, 9658, 9666, 9681, 9684, 9686, 9687, 9688, 9694, 9696, 9703, 9710, 9719, 9721, 9727, 9732, 9737, 9739, 9746, 9750, 9752, 9754, 9755, 9765, 9768, 9769, 9776, 9784, 9787, 9805, 9806, 9810, 9812, 9813, 9817, 9826, 9833, 9852, 9858, 9864, 9883, 9887, 9900, 9908, 9909, 9911, 9919, 9924, 9935, 9936, 9941, 9946, 9949, 9950, 9953, 9959, 9979, 9985, 9987, 9995, 9996, 9997, 10006, 10007, 10010, 10014, 10017, 10018, 10025, 10028, 10036, 10045, 10048, 10049, 10074, 10077, 10078, 10079, 10086, 10089, 10090, 10093, 10102, 10112, 10115, 10116, 10123, 10124, 10128, 10129, 10130, 10137, 10145, 10166, 10169, 10172, 10174, 10177, 10178, 10191, 10198, 10216, 10217, 10224, 10227, 10242, 10251, 10256, 10260, 10262, 10269, 10271, 10272, 10274, 10275, 10279, 10283, 10287, 10291, 10294, 10299, 10301, 10302, 10303, 10314, 10316, 10320, 10321, 10324, 10331, 10332, 10338, 10349, 10351, 10352, 10368, 10371, 10391, 10397, 10398, 10411, 10413, 10417, 10420, 10422, 10430, 10432, 10438, 10441, 10445, 10450, 10455, 10458, 10469, 10471, 10476, 10485, 10490, 10496, 10502, 10506, 10512, 10528, 10530, 10532, 10534, 10536, 10538, 10545, 10546, 10547, 10550, 10554, 10559, 10560, 10568, 10570, 10576, 10591, 10592, 10594, 10600, 10608, 10609, 10610, 10619, 10630, 10631, 10636, 10645, 10646, 10647, 10653, 10654, 10657, 10665, 10667, 10677, 10690, 10695, 10696, 10703, 10723, 10724, 10727, 10731, 10739, 10757, 10760, 10761, 10774, 10781, 10787, 10788, 10793, 10801, 10803, 10805, 10807, 10809, 10823, 10831, 10832, 10833, 10835, 10836, 10837, 10842, 10843, 10844, 10845, 10846, 10847, 10849, 10851, 10852, 10854, 10855, 10856, 10867, 10876, 10884, 10889, 10895, 10908, 10910, 10918, 10948, 10953, 10959, 10960, 10962, 10963, 10976, 10995, 10998, 11004, 11011, 11014, 11016, 11018, 11023, 11025, 11028, 11034, 11035, 11040, 11045, 11050, 11051, 11065, 11075, 11077, 11079, 11098, 11099, 11100, 11101, 11102, 11132, 11134, 11137, 11142, 11146, 11149, 11158, 11166, 11170, 11176, 11183, 11211, 11219, 11220, 11223, 11225, 11228, 11243, 11252, 11257, 11265, 11278, 11280, 11282, 11285, 11287, 11292, 11294, 11295, 11301, 11311, 11322, 11328, 11340, 11344, 11347, 11349, 11359, 11362, 11365, 11368, 11371, 11385, 11386, 11391, 11398, 11421, 11425, 11436, 11439, 11440, 11442, 11455, 11465, 11470, 11486, 11490, 11523, 11527, 11532, 11541, 11543, 11552, 11566, 11572, 11577, 11590, 11599, 11601, 11621, 11627, 11640, 11649, 11673, 11677, 11681, 11694, 11696, 11704, 11708, 11713, 11731, 11732, 11733, 11736, 11737, 11754, 11758, 11775, 11781, 11786, 11787, 11788, 11799, 11801, 11806, 11807, 11810, 11821, 11822, 11826, 11831, 11839, 11844, 11847, 11853, 11854, 11871, 11875, 11880, 11885, 11886, 11887, 11891, 11895, 11896, 11897, 11901, 11911, 11913, 11915, 11930, 11932, 11940, 11950, 11954, 11958, 11959, 11960, 11962, 11966, 11967, 11970, 11971, 11982, 11985, 11990, 11994, 11995, 12010, 12011, 12023, 12024, 12028, 12036, 12039, 12040, 12042, 12052, 12054, 12056, 12061, 12062, 12068, 12087, 12099, 12128, 12141, 12153}

func main() {
	result := store.GeminiResult{}
	all, _ := result.FindByIds(ids, db.Client())
	var resumeArr []profile.Resume
	for _, d := range all {
		step1 := d.GeminiStep1
		step2 := d.GeminiStep2
		resume := profile.MergeStep1AndStep2([]byte(step1), []byte(step2))
		resume.BasicInformation.ProfileUrl = d.CVURL
		resume.ID = d.ID
		resumeArr = append(resumeArr, *resume)
	}
	insert2ES(resumeArr)
}

func insert2ES(resumeArr []profile.Resume) {
	// Elasticsearch 连接配置
	cfg := elasticsearch.Config{
		//Addresses: []string{"http://10.128.0.165:9200", "http://10.128.0.72:9200"}, //生产环境
		Addresses: []string{"http://10.129.0.251:9200", "http://10.129.0.217:9200", "http://10.129.0.146:9200"}, //预发环境
		Password:  "Qiyi123!@#",
		Username:  "elastic",
	}
	es, err := elasticsearch.NewClient(cfg)
	if err != nil {
		log.Fatalf("Error creating the client: %s", err)
	}

	// 执行批量插入请求
	// 批量插入数据
	for _, doc := range resumeArr {
		// 将文档转换为 JSON 格式
		docJSON, err := json.Marshal(doc)
		if err != nil {
			log.Printf("Error marshalling document: %s", err)
			continue
		}

		// 准备批量插入请求
		req := esapi.IndexRequest{
			Index:      "hra_cv_v1", // 替换为你的索引名称
			DocumentID: strconv.Itoa(int(doc.ID)),
			Body:       bytes.NewReader(docJSON),
			Refresh:    "true",
		}

		// 执行批量插入请求
		res, err := req.Do(context.Background(), es)
		if err != nil {
			log.Printf("Error indexing document: %s", err)
			continue
		}
		defer res.Body.Close()

		if res.IsError() {
			log.Printf("[%s] Error indexing document: %s", res.Status(), res.String())
		} else {
			log.Printf("[%s] Indexed document with ID: %d", res.Status(), doc.ID)
		}
	}
}
